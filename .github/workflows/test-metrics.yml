name: Test Quality Metrics

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

env:
  GO_VERSION: '1.23'

jobs:
  collect-metrics:
    name: Collect Test Metrics
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Need full history for trend analysis

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install dependencies
        run: |
          go mod download
          sudo apt-get update
          sudo apt-get install -y jq bc python3

      - name: Run test metrics collection
        id: metrics
        run: |
          ./scripts/test_metrics.sh
          
          # Extract key metrics for output
          METRICS_FILE=$(ls test_metrics/results/metrics_*.json | tail -1)
          echo "metrics_file=$METRICS_FILE" >> $GITHUB_OUTPUT
          echo "quality_score=$(jq '.metrics.quality_score.overall' $METRICS_FILE)" >> $GITHUB_OUTPUT
          echo "coverage=$(jq '.metrics.coverage.average' $METRICS_FILE)" >> $GITHUB_OUTPUT
          echo "flaky_count=$(jq '.metrics.flakiness.flaky_test_count' $METRICS_FILE)" >> $GITHUB_OUTPUT
        continue-on-error: true

      - name: Upload metrics artifacts
        uses: actions/upload-artifact@v4
        with:
          name: test-metrics-${{ github.run_number }}
          path: |
            test_metrics/
          retention-days: 30

      - name: Comment PR with metrics
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const metricsFile = '${{ steps.metrics.outputs.metrics_file }}';
            const qualityScore = ${{ steps.metrics.outputs.quality_score || 0 }};
            const coverage = ${{ steps.metrics.outputs.coverage || 0 }};
            const flakyCount = ${{ steps.metrics.outputs.flaky_count || 0 }};
            
            const scoreEmoji = qualityScore >= 80 ? '✅' : qualityScore >= 60 ? '⚠️' : '❌';
            const coverageEmoji = coverage >= 70 ? '✅' : coverage >= 50 ? '⚠️' : '❌';
            const flakyEmoji = flakyCount === 0 ? '✅' : flakyCount <= 2 ? '⚠️' : '❌';
            
            const comment = `## Test Quality Metrics Report
            
            | Metric | Value | Status |
            |--------|-------|--------|
            | **Quality Score** | ${qualityScore.toFixed(1)}/100 | ${scoreEmoji} |
            | **Test Coverage** | ${coverage.toFixed(1)}% | ${coverageEmoji} |
            | **Flaky Tests** | ${flakyCount} | ${flakyEmoji} |
            
            ### Detailed Report
            View the full test metrics dashboard in the [workflow artifacts](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}).
            
            ---
            *Generated by Test Quality Metrics workflow*`;
            
            // Find existing comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('Test Quality Metrics Report')
            );
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: comment
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            }

      - name: Update metrics badge
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          # Create badges directory
          mkdir -p .github/badges
          
          # Generate coverage badge
          COVERAGE=${{ steps.metrics.outputs.coverage || 0 }}
          COLOR="red"
          if (( $(echo "$COVERAGE >= 80" | bc -l) )); then
            COLOR="brightgreen"
          elif (( $(echo "$COVERAGE >= 60" | bc -l) )); then
            COLOR="yellow"
          elif (( $(echo "$COVERAGE >= 40" | bc -l) )); then
            COLOR="orange"
          fi
          
          curl -s "https://img.shields.io/badge/coverage-${COVERAGE}%25-${COLOR}" > .github/badges/coverage.svg
          
          # Generate quality score badge
          QUALITY=${{ steps.metrics.outputs.quality_score || 0 }}
          COLOR="red"
          if (( $(echo "$QUALITY >= 80" | bc -l) )); then
            COLOR="brightgreen"
          elif (( $(echo "$QUALITY >= 60" | bc -l) )); then
            COLOR="yellow"
          elif (( $(echo "$QUALITY >= 40" | bc -l) )); then
            COLOR="orange"
          fi
          
          curl -s "https://img.shields.io/badge/quality-${QUALITY}-${COLOR}" > .github/badges/quality.svg

      - name: Check quality gates
        if: github.event_name == 'pull_request'
        run: |
          QUALITY_SCORE=${{ steps.metrics.outputs.quality_score || 0 }}
          COVERAGE=${{ steps.metrics.outputs.coverage || 0 }}
          FLAKY_COUNT=${{ steps.metrics.outputs.flaky_count || 0 }}
          
          FAILED=0
          
          # Check minimum quality score
          if (( $(echo "$QUALITY_SCORE < 60" | bc -l) )); then
            echo "::error::Quality score is below minimum threshold (60): $QUALITY_SCORE"
            FAILED=1
          fi
          
          # Check minimum coverage
          if (( $(echo "$COVERAGE < 50" | bc -l) )); then
            echo "::error::Coverage is below minimum threshold (50%): $COVERAGE%"
            FAILED=1
          fi
          
          # Check flaky tests
          if [ "$FLAKY_COUNT" -gt 5 ]; then
            echo "::error::Too many flaky tests detected: $FLAKY_COUNT"
            FAILED=1
          fi
          
          if [ "$FAILED" -eq 1 ]; then
            echo "::error::Quality gates failed!"
            exit 1
          fi
          
          echo "::notice::All quality gates passed!"

  publish-dashboard:
    name: Publish Dashboard
    runs-on: ubuntu-latest
    needs: collect-metrics
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    permissions:
      contents: write
      pages: write
      id-token: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download metrics artifacts
        uses: actions/download-artifact@v4
        with:
          name: test-metrics-${{ github.run_number }}
          path: test_metrics/

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Prepare dashboard for Pages
        run: |
          mkdir -p _site
          cp test_metrics/dashboard.html _site/index.html
          cp -r test_metrics/reports _site/
          
          # Create a simple navigation page
          cat > _site/metrics.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head>
              <title>Qualhook Test Metrics</title>
              <style>
                  body { font-family: Arial, sans-serif; margin: 40px; }
                  h1 { color: #333; }
                  .link { margin: 10px 0; }
                  a { color: #0366d6; text-decoration: none; }
                  a:hover { text-decoration: underline; }
              </style>
          </head>
          <body>
              <h1>Qualhook Test Quality Metrics</h1>
              <div class="link">
                  <a href="/">Latest Dashboard</a>
              </div>
              <div class="link">
                  <a href="https://github.com/${{ github.repository }}/actions/workflows/test-metrics.yml">View Workflow History</a>
              </div>
          </body>
          </html>
          EOF

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: _site

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4